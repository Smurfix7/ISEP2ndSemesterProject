@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class Employee {

email: Email
name: String
position: String
phone: String
}
class Person {

name: String
taxNumber: String
emailAddress: String
telephoneNumber: String
address: Address
role: Role
passportCard: PassportCard
+ getName()
}
class CreateAnnouncementController {
      + CreateAnnouncement(propertyType: String, agent: Employee, owner: Person, areaOfProperty: double, distanceFromCentre: double, acceptanceDate: String, requestDate: String, street: String, city: String, state: String, zipCode: String, photos: ArrayList<Photo>, transactionType: String,\n monetaryValue: double, bedrooms: int, bathrooms: int, parkingSpaces: int, basement: String, loft: String, sunExposure: String, equipment: Equipment, commissionType: String, commissionValue: double): Announcement
      + getCopyAgentList(): List<Employee>
      + getPropertyTypeList(): String[]
    }

class Property {
  - properties: List<Property>
  - cont: int
  - propertyType: String
  - areaOfProperty: double
  - distanceFromCentre: double
  - address: Address
  - photos: ArrayList<Photo>
  - photo: Photo
  - propertyID: int
  --
  + validateProperty(property: Property)
  + setPropertyType(propertyType: String)
  + getDistanceFromCentre()
  + setDistanceFromCentre(distanceFromCentre: double)
  + getAreaOfProperty()
  + setAreaOfProperty(areaOfProperty: double)
  + getAddress()
  + getPropertyID()
  + getPropertyType()
  + setAddress(address: Address)
  + getPhoto()
  + setPhoto(photoURI: String)
  + IsListed(property: Property)
  + toString()
  + setAddres(address: Address)
}
class Announcement {
  - cont: int
  - request: Request
  - announcementID: int
  - acceptanceDate: String
  - commission: CommissionDetails
  --
  + getRequest()
  + setRequest(request: Request)
  + getAnnouncementID()
  + setAnnouncementID(announcementID: int)
  + getAcceptanceDate()
  + setAcceptanceDate(acceptanceDate: String)
  + getCommission()
  + setCommission(commission: CommissionDetails)
  + toString()
}
class CreateAnnouncementUI{}

class Repositories {
  - Repositories()
  +getInstance() : Repositories
  +getOwnerRepository()
  +getEmployeeRepository()
  +getPropertyTypeRepository()
  +getPropertyRepository()
  +getAnnouncementRepository()
  +getRequestRepository()
}

class PropertyTypeRepository{
    +getPropertyTypeList()
}

class EmployeeRepository{
    +getEmployee(n)
    +getEmployeeList()
}

class OwnerRepository{
    +getOwner(n)
    +getOwnerList()
}

class House extends Building{
  - basement: String
  - loft: String
  - sunExposure: String
  --
  + setBasement(basement: String)
  + getBasement()
  + setLoft(loft: String)
  + getLoft()
  + getSunExposure()
  + setSunExposure(sunExposure: String)
  + toString()
}


interface Message{
    +sendMessage()
}

class SendNotification implements Message{
    +sendMessage()
}
class Building extends Property{
  - bedrooms: int
  - bathrooms: int
  - parkingSpaces: int
  - equipment: Equipment
  --
  + getBathrooms()
  + setBathrooms(bathrooms: int)
  + getBedrooms()
  + setBedrooms(bedrooms: int)
  + getParkingSpaces()
  + setParkingSpaces(parkingSpaces: int)
  + toString()
}

class Request {
  - cont: int
  - property: Property
  - owner: Person
  - requestDate: String
  - agent: Employee
  - transaction: Transaction
  - requestID: int
  --
  + getOwner()
  + setOwner(owner: Person)
  + getAgent()
  + setAgent(agent: Employee)
  + getProperty()
  + setProperty(property: Property)
  + getRequestDate()
  + setRequestDate(requestDate: String)
  + getTypeOfTransaction()
  + setTypeOfTransaction(transaction: Transaction)
  + getRequestID()
  + setRequestID(requestID: int)
  + toString()
}

class Address {
  - street: String
  - city: String
  - district: String
  - state: String
  --
  + getStreet()
  + setStreet(street: String)
  + getCity()
  + setCity(city: String)
  + getDistrict()
  + setDistrict(district: String)
  + getState()
  + setState(state: String)
  + getZipCode()
  + setZipCode(zipCode: String)
  + toString()
  + equals(address2: Address)
}

class Photo {
  - photoID: int
  - photoURI: String
  - count: int
  --
  + getPhotoID()
  + setPhotoID(photoID: int)
  + getPhotoURI()
  + setPhotoURI(photoURI: String)
  + toString()
}

class Equipment{}

class Transaction {
  - transactionType: String
  - monetaryValue: double
  --
  + getTransactionType()
  + setTransactionType(transactionType: String)
  + getMonetaryValue()
  + setMonetaryValue(monetaryValue: double)
  + toString()
}

class Commission {
  - commissionType: String
  - commissionValue: Double
  --
  + toString()
  + getCommissionValue()
  + getCommissionType()
}

class SendNotification{}

class Agency {
    - agencyID: String
    - agencyName: String
    - emailAddress: String
    - contactTelephoneNumber: String
    - address: Address
    + getAgencyID()
    + setAgencyID(agencyID: String)
    + getAgencyName()
    + setAgencyName(agencyName: String)
    + getEmailAddress()
    + setEmailAddress(emailAddress: String)
    + getContactTelephoneNumber()
    + setContactTelephoneNumber(contactTelephoneNumber: String)
    + getAddress()
    + setAddress(address: Address)
    + toString()
}

class RequestsRepository {
  - listingRequests: List<Request>
  --
  + getListingRequests(): ArrayList<Request>
  + validateRequest(request: Request): boolean
  + getRequestWithID(n: int): Request
  + getNumberOfRequests(): int
  + containsProperty(property: Property): boolean
  + checkRequestExists(propertyID: int): boolean
  + sortRequestList(): boolean
  + swapRequests(n1: int, n2: int): void
  + getRequestListByEmail(email: String): ArrayList<Request>
  + deleteRequest(request: Request): void
  + getRequest(request: Request): Request
  + addRequest(request: Request): boolean
}

class PropertyRepository {
  - properties: ArrayList<Property>
  --
  + addProperty(property: Property): void
  + validateProperty(property: Property): boolean
  + getProperties(): ArrayList<Property>
}

class AnnouncementRepository {
  - announcements: ArrayList<Announcement>
  --
  + addAnnouncement(announcement: Announcement): void
  + validateAnnouncement(announcement: Announcement): boolean
  + getAnnouncements(): ArrayList<Announcement>
  + getAnnouncementWithID(ID: int): Announcement
  + checkAnnouncementExists(announcementID: int): boolean
}

CreateAnnouncementController ..> Repositories : "Repositories"
Repositories --> Repositories : instance
OwnerRepository --> "1" Person : person
Repositories ..> "1" OwnerRepository : ownerRepository
Repositories ..> "1" PropertyRepository : propertyRepository
Repositories ..> "1" RequestsRepository : requestRepository
Repositories ..> "1" AnnouncementRepository : announcementRepository
AnnouncementRepository "1" --> "*" Announcement : announcement
PropertyRepository "1" --> "*" Property : property
RequestsRepository "1" --> "*" Request : request
Repositories ..> PropertyTypeRepository : propertyTypeRepository
Repositories ..> EmployeeRepository : employeeRepository
EmployeeRepository --> Employee : employee
note bottom of PropertyTypeRepository
    - used for getting
    the property type list
end note
note bottom of EmployeeRepository
    - used for getting
    the agent list
end note
note bottom of OwnerRepository
    - used for getting
    the owner list
end note

CreateAnnouncementController ..> "1" Message
Request "1" -down- "1" Property : > request of
Property "1" -- "1" Address : > has an address
Property "1" -- "..*" Photo : > has Photos
Building "1" -left- "1..*" Equipment : > has Equipment
Request "1" -- "1" Person : > has an owner
Agency ---> "..*" Request : lists requests
Agency --> "..*" Announcement : creates announcements
Request "1" -- "1" Property : listing request of
Request "1" -- "1" Employee : > assigned to an
Request "1" -- "1" Transaction : > stores information of
Announcement "1" - "1" Request : > announcement of
Announcement "1" - "1" Commission : > has a commission
CreateAnnouncementUI ..> CreateAnnouncementController
CreateAnnouncementController ..> Agency

@enduml