@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam linetype orto

skinparam classAttributeIconSize 0
skinparam nodesep 50


class SendEmail {
  - filePath: String

  + sendEmail(message: String): void
}


class ApprovePropertyUI {
  - read: Scanner
  - requests: List<Property>
  - controller: ApprovePropertyController
  + run(): void
  + displayRequestsList(displayList: String): void
  - requestJustification(): String
}


class Controller as "ApprovePropertyController" {
    - propertyRequestRepository: PropertyRequestRepository
    - authenticationRepository: AuthenticationRepository
    + approveProperty(option: int, commission: CommissionDetails): void
    + getLoggedUser(): String
    - getAuthenticationRepository(): AuthenticationRepository
    - getPropertyRequestRepository(): PropertyRequestRepository
    + getRequestsList(email: String): String
    + rejectProperty(option: int): void
    + sendEmail(justification: String): String
  }

class PropertyRequestRepository {
    - announcementRequests: List<Property>
    + getPropertyRequest(property: Property): Property
    + addPropertyRequest(property: Property): void
    + removePropertyRequest(n: int): void
    + addLandRequest(land: Land): void
    + addHouseRequest(house: House): void
    + addApartmentRequest(apartment: Apartment): void
    + containsProperty(property: Property): boolean
    + getRequests(): ArrayList
    + getNumberOfRequests(): int
    + getPropertyRequest(n: int): Property
    + getRequestListByEmail(email: String): ArrayList<String>
    + sortRequestList(): void
    + swapRequests(n1: int, n2: int): void
  }

class LandRepository {
  - lands: List<Land>
  + getLand(land: Land): Land
  + addLand(land: Land): void
  + getLand(n: int): Property
  + getLands(): ArrayList
  + getLandById(n: int): Land
  + numberOfLands(): int
}

class HouseRepository {
  - houses: List<House>
  + getHouse(house: House): House
  + addHouse(house: House)
  + getHouseById(n: int): House
  + getHouse(n: int): Property
  + getHouses(): ArrayList
  + numberOfHouses(): int
}

class ApartmentRepository {
  - apartments: List<Apartment>
  + getApartment(apartment: Apartment): Apartment
  + addApartment(apartment: Apartment)
  + getApartment(n: int): Apartment
  + getApartmentById(n: int): Apartment
  + getApartments(): ArrayList
  + numberOfApartments(): int
}


class AnnouncementRepository {
  +addLand(land: Land)
  +addApartment(apartment: Apartment)
  +addHouse(house: House)
}

class Repositories {
  - Repositories()
  +getInstance() : Repositories
  +getAnnouncementRepository()
}

class AuthorizationRepository {
  +getAuthorizationRepository(): AuthorizationRepository
}

class UserSession {
  +getUserSession(): UserSession
  +getUserID(): UserID
  +getUserEmail(): string
}

class ApprovePropertyUI{

}


class Property {
  - cont: int
  - propertyType: String
  - owner: Owner
  - commission: CommissionDetails
  - agent: Agent
  - areaOfProperty: double
  - distanceFromCentre: double
  - acceptanceDate: String
  - requestDate: String
  - address: Address
  - photo: Photo
  - typeOfTransaction: TypeOfTransaction
  - propertyID: int
  + setCommissionDetails(commission: CommissionDetails): void
  + setPropertyType(propertyType: String): void
  + setAgent(agent: Agent): void
  + getAgent(): Agent
  + getDistanceFromCentre(): double
  + setDistanceFromCentre(distanceFromCentre: double): void
  + getAreaOfProperty(): double
  + setAreaOfProperty(areaOfProperty: double): void
  + getAcceptanceDate(): String
  + setAcceptanceDate(acceptanceDate: String): void
  + getRequestDate(): String
  + setRequestDate(requestDate: String): void
  + getAddress(): Address
  + getPropertyID(): int
  + getPropertyType(): String
  + setAddress(address: Address): void
  + getPhoto(): Photo
  + setPhoto(photoURI: String): void
  + getTypeOfTransaction(): TypeOfTransaction
  + setTypeOfTransaction(transactionType: String, monetaryValue: double): void
  + IsListed(property: Property): boolean
  + toString(): String
  + setAddres(street: String, city: String, state: String, zipCode: String): void
}

class TypeOfTransaction {
  - transactionType: String
  - monetaryValue: double
  --
  + getTransactionType(): String
  + setTransactionType(transactionType: String): void
  + getMonetaryValue(): double
  + setMonetaryValue(monetaryValue: double): void
  + toString(): String
}


class Address {
  - street: String
  - city: String
  - state: String
  - zipCode: String
  --
  + getStreet(): String
  + setStreet(street: String): void
  + getCity(): String
  + setCity(city: String): void
  + getState(): String
  + setState(state: String): void
  + getZipCode(): String
  + setZipCode(zipCode: String): void
  + toString(): String
  + equals(address2: Address): boolean
}


class PropertyTypeRepository {
  - propertyTypes: String[]
  --
  + getPropertyType(n: int): String
  + displayPropertyTypes(): String
}


class Photo {
  - photoID: int
  - photoURI: String
  --
  + getPhotoID(): int
  + setPhotoID(photoID: int): void
  + getPhotoURI(): String
  + setPhotoURI(photoURI: String): void
  + toString(): String
}


class Building {
  - bedrooms: int
  - bathrooms: int
  - parkingSpaces: int
  - equipment: Equipment
  --
  + getBathrooms(): int
  + setBathrooms(bathrooms: int): void
  + getBedrooms(): int
  + setBedrooms(bedrooms: int): void
  + getParkingSpaces(): int
  + setParkingSpaces(parkingSpaces: int): void
  + toString(): String
}


class Equipment {
  - airConditioning: String
  - centralHeating: String
  --
  + getAirConditioning(): String
  + getCentralHeating(): String
  + setAirConditioning(airConditioning: String): void
  + setCentralHeating(centralHeating: String): void
  + toString(): String
}


class House {
  - basement: boolean
  - loft: boolean
  - sunExposure: String
  --
  + setBasement(basement: boolean): void
  + getBasement(): boolean
  + setLoft(loft: boolean): void
  + getLoft(): boolean
  + getSunExposure(): String
  + setSunExposure(sunExposure: String): void
  + toString(): String
}



class CommissionDetails {
  - commissionType: String
  - commissionValue: Double
  --
  + toString(): String
  + getCommissionValue(): Double
  + getCommissionType(): String
}




Property -left> LandRepository
Property -left> HouseRepository
Property -> ApartmentRepository

Controller -left|> LandRepository
Controller -left|> HouseRepository
Controller -down|> ApartmentRepository


Property -left- CommissionDetails : comission

Controller -- Repositories
Repositories -- AuthorizationRepository
AuthorizationRepository -- UserSession

Land -> Property : extends
Apartment -> Building : extends
ApprovePropertyUI - Controller

Property - PropertyTypeRepository : propertyType
Address .. "address" Property
Equipment <.up. "equipmentList" Building
Photo .. "photoList" Property
Property "extends" --> Building
Building "extends" -down-> House
Controller  --|> SendEmail
TypeOfTransaction "typeOfTransaction" .. Property
Controller --right|> PropertyRequestRepository


Controller --|> Property

Controller --|> AnnouncementRepository

@enduml
